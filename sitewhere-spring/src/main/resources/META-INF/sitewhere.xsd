<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.sitewhere.com/schema/sitewhere/ce" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:beans="http://www.springframework.org/schema/beans" targetNamespace="http://www.sitewhere.com/schema/sitewhere/ce"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans"
		schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"/>

	<xsd:element name="configuration" type="configurationType">
		<xsd:annotation>
			<xsd:documentation>
				Provides configuration information for a SiteWhere server instance.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<xsd:complexType name="configurationType">
		<xsd:all>
			<xsd:element name="globals" type="globalsType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Global configuration settings for external services that SiteWhere
						interacts with.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="datastore" type="datastoreType">
				<xsd:annotation>
					<xsd:documentation>
						Provides information about how SiteWhere global system data is to
						be persisted and how the common service provider interfaces are implemented.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:all>
		<xsd:attribute name="enableVersionCheck" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>Enables version checking mechanism which requests latest version
					information from the internet and logs a message if the currently running version is
					out of date.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="datastoreType">
		<xsd:all>
			<xsd:element ref="abstract-datastore"/>
			<xsd:element ref="abstract-user-model-initializer" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Initializes user model with data if database is empty.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="abstract-tenant-model-initializer" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Initializes tenant model with data if database is empty.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:all>
	</xsd:complexType>

	<!-- Used as a placeholder for datastores to allow substitutionGroups -->
	<xsd:element name="abstract-datastore" abstract="true" type="abstractDatastoreType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for datastore elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common datastore information -->
	<xsd:complexType name="abstractDatastoreType"/>

	<!-- Configuration data for a MongoDB datastore -->
	<xsd:element name="mongo-datastore" type="mongoDatastoreType"
		substitutionGroup="abstract-datastore">
		<xsd:annotation>
			<xsd:documentation>Global datastore that uses MongoDB for data persistence.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mongoDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractDatastoreType">
				<xsd:attributeGroup ref="mongo-attributes"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- MongoDB datastore attributes -->
	<xsd:attributeGroup name="mongo-attributes">
		<xsd:attribute name="hostname" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Server hostname for MongoDB instance.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="port" type="substitutableInt">
			<xsd:annotation>
				<xsd:documentation>Server port for MongoDB instance.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="databaseName" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>MongoDB database name for SiteWhere storage.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="useDockerLinking" type="xsd:boolean" use="optional">
			<xsd:annotation>
				<xsd:documentation>If enabled, uses environment variables set by Docker linking to
					derive host and port to connect to.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="username" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Username used to authenticate.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="password" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Password used to authenticate.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	
	<!-- Configuration data for an HBase datastore -->
	<xsd:element name="hbase-datastore" type="hbaseDatastoreType"
		substitutionGroup="abstract-datastore">
		<xsd:annotation>
			<xsd:documentation>Datastore that uses Apache HBase for data persistence.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hbaseDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractDatastoreType">
				<xsd:attributeGroup ref="hbase-attributes"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- HBase datastore attributes -->
	<xsd:attributeGroup name="hbase-attributes">
		<xsd:attribute name="quorum" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>ZooKeeper quorum address</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="zookeeperClientPort" type="xsd:int" use="optional">
			<xsd:annotation>
				<xsd:documentation>ZooKeeper client port. Defaults to 2181.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="zookeeperZnodeParent" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>ZooKeeper znode parent. Defaults to '/hbase'.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="zookeeperZnodeRootServer" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>ZooKeeper znode root server. Defaults to 'root-region-server'.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	
	<!-- Used as a placeholder for user model initializers to allow substitutionGroups -->
	<xsd:element name="abstract-user-model-initializer" abstract="true"
		type="abstractUserModelInitializerType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for user model initializer elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common user model initializer information -->
	<xsd:complexType name="abstractUserModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>
	
	<!-- Default user model initializer -->
	<xsd:element name="default-user-model-initializer" type="defaultUserModelInitializerType"
		substitutionGroup="abstract-user-model-initializer">
		<xsd:annotation>
			<xsd:documentation>User model initializer that loads the default user data referenced
				by examples.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultUserModelInitializerType">
		<xsd:complexContent>
			<xsd:extension base="abstractUserModelInitializerType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Groovy user model initializer -->
	<xsd:element name="groovy-user-model-initializer" type="groovyUserModelInitializerType"
		substitutionGroup="abstract-user-model-initializer">
		<xsd:annotation>
			<xsd:documentation>User model initializer that delegates creation logic to a Groovy
				script.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyUserModelInitializerType">
		<xsd:complexContent>
			<xsd:extension base="abstractUserModelInitializerType">
				<xsd:attribute name="scriptPath" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that executes logic needed to create user
							model.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Used as a placeholder for tenant model initializers to allow substitutionGroups -->
	<xsd:element name="abstract-tenant-model-initializer" abstract="true"
		type="abstractTenantModelInitializerType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for tenant model initializer elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common tenant model initializer information -->
	<xsd:complexType name="abstractTenantModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>
	
	<!-- Default tenant model initializer -->
	<xsd:element name="default-tenant-model-initializer" type="defaultTenantModelInitializerType"
		substitutionGroup="abstract-tenant-model-initializer">
		<xsd:annotation>
			<xsd:documentation>Tenant model initializer that loads the default tenant data
				referenced by examples.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultTenantModelInitializerType">
		<xsd:complexContent>
			<xsd:extension base="abstractTenantModelInitializerType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Groovy tenant model initializer -->
	<xsd:element name="groovy-tenant-model-initializer" type="groovyTenantModelInitializerType"
		substitutionGroup="abstract-tenant-model-initializer">
		<xsd:annotation>
			<xsd:documentation>Tenant model initializer that delegates creation logic to a Groovy
				script.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyTenantModelInitializerType">
		<xsd:complexContent>
			<xsd:extension base="abstractTenantModelInitializerType">
				<xsd:attribute name="scriptPath" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that executes logic needed to create
							tenant model.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains global configuration elements -->
	<xsd:complexType name="globalsType">
		<xsd:sequence>
			<xsd:element ref="abstract-global" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- Used as a placeholder for global elements to allow substitutionGroups -->
	<xsd:element name="abstract-global" abstract="true" type="abstractGlobalType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for global elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<!-- Common global element information -->
	<xsd:complexType name="abstractGlobalType"/>

	<!-- Configuration data for Hazelcast services -->
	<xsd:element name="hazelcast-configuration" type="hazelcastConfigurationType"
		substitutionGroup="abstract-global">
		<xsd:annotation>
			<xsd:documentation>Global configuration settings for Hazelcasst.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastConfigurationType">
		<xsd:complexContent>
			<xsd:extension base="abstractGlobalType">
				<xsd:attribute name="configFileLocation" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>Path to Hazelcast configuration file.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="groupName" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>Overrides group name from configuration file if present.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="groupPassword" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>Overrides group password from configuration file if present.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configuration data for Solr services -->
	<xsd:element name="solr-configuration" type="solrConfigurationType"
		substitutionGroup="abstract-global">
		<xsd:annotation>
			<xsd:documentation>Global configuration settings for Apache Solr.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="solrConfigurationType">
		<xsd:complexContent>
			<xsd:extension base="abstractGlobalType">
				<xsd:attribute name="solrServerUrl" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>URL used by Solr client to access server.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

    <!-- Configuration data for Groovy services -->
	<xsd:element name="groovy-configuration" type="groovyConfigurationType"
		substitutionGroup="abstract-global">
		<xsd:annotation>
			<xsd:documentation>Global configuration settings for Groovy scripting.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyConfigurationType">
		<xsd:complexContent>
			<xsd:extension base="abstractGlobalType">
				<xsd:attribute name="debug" type="xsd:boolean" use="optional">
					<xsd:annotation>
						<xsd:documentation>Turns on Groovy script engine debugging if true.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="verbose" type="xsd:boolean" use="optional">
					<xsd:annotation>
						<xsd:documentation>Turns on Groovy script engine verbose flag if true.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="externalScriptRoot" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>Sets script root to an external URL rathen than using the default
							filesystem path.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!-- Defines property placeholder regular expression -->
	<xsd:simpleType name="propertyPlaceholderType">
		<xsd:annotation>
			<xsd:documentation>
				Defines string value restricted to a Spring property placeholder.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="\$\{[^\}]+\}"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="substitutableInt">
		<xsd:annotation>
			<xsd:documentation>
				Value that can be an integer or a property placeholder value.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:union>
			<xsd:simpleType>
				<xsd:restriction base="propertyPlaceholderType"/>
			</xsd:simpleType>
			<xsd:simpleType>
				<xsd:restriction base="xsd:int"/>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>
</xsd:schema>