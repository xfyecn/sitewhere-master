<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.sitewhere.com/schema/sitewhere/ce/tenant"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:sw="http://www.sitewhere.com/schema/sitewhere/ce"
	targetNamespace="http://www.sitewhere.com/schema/sitewhere/ce/tenant"
	elementFormDefault="qualified" attributeFormDefault="unqualified"
	xmlns:pref="http://www.sitewhere.com/schema/sitewhere/ce">

	<xsd:import
		schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"
		namespace="http://www.springframework.org/schema/beans">
	</xsd:import>
	<xsd:import
		schemaLocation="http://www.sitewhere.org/schema/sitewhere/ce/current/sitewhere.xsd"
		namespace="http://www.sitewhere.com/schema/sitewhere/ce"></xsd:import>

	<xsd:element name="tenant-configuration" type="tenantConfigurationType">
		<xsd:annotation>
			<xsd:documentation>
				Provides configuration information for a SiteWhere
				server tenant.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<xsd:complexType name="tenantConfigurationType">
		<xsd:all>
			<xsd:element name="globals" type="globalsType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Global configuration settings for external
						services that SiteWhere interacts with.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="tenant-datastore" type="tenantDatastoreType">
				<xsd:annotation>
					<xsd:documentation>
						Provides information about how tenant-specific
						SiteWhere data is to be persisted and how the core service
						provider interfaces are implemented. Caching of persisted data is
						also configured in this section.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="abstract-communication-subsystem-implementation" />
			<xsd:element ref="abstract-event-processing-subsystem-implementation" />
			<xsd:element name="asset-management" type="assetManagementType">
				<xsd:annotation>
					<xsd:documentation>
						Specifies details related to the asset
						management subsystem including the asset manager implementation
						and the list of asset modules that should be used for device
						assignments.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="search-providers" type="searchProvidersType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Specifies a list of external search providers
						that have indexed SiteWhere data and may be queried via the REST
						services, returning a list of SiteWhere events.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:all>
	</xsd:complexType>


	<!-- =============== -->
	<!-- GLOBAL ELEMENTS -->
	<!-- =============== -->

	<!-- Contains global configuration elements -->
	<xsd:complexType name="globalsType">
		<xsd:sequence>
			<xsd:element ref="sw:abstract-global" minOccurs="0"
				maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>


	<!-- ========================= -->
	<!-- TENANT DATASTORE ELEMENTS -->
	<!-- ========================= -->

	<xsd:complexType name="tenantDatastoreType">
		<xsd:all>
			<xsd:element ref="abstract-tenant-datastore" />
			<xsd:element ref="abstract-cache" minOccurs="0" />
			<xsd:element ref="abstract-device-model-initializer"
				minOccurs="0" />
			<xsd:element minOccurs="0" name="default-asset-model-initializer"
				type="defaultAssetModelInitializerType">
				<xsd:annotation>
					<xsd:documentation>
						Initializes asset model with data if database is
						empty.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0"
				name="default-schedule-model-initializer" type="defaultScheduleModelInitializerType">
				<xsd:annotation>
					<xsd:documentation>
						Initializes schedule model with data if database
						is empty.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:all>
	</xsd:complexType>

	<!-- Used as a placeholder for tenant datastores to allow substitutionGroups -->
	<xsd:element name="abstract-tenant-datastore" abstract="true"
		type="abstractTenantDatastoreType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for tenant datastore elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common tenant datastore information -->
	<xsd:complexType name="abstractTenantDatastoreType" />

	<!-- Configuration data for a MongoDB tenant datastore -->
	<xsd:element name="mongo-tenant-datastore" type="mongoTenantDatastoreType"
		substitutionGroup="abstract-tenant-datastore">
		<xsd:annotation>
			<xsd:documentation>Tenant datastore that uses MongoDB for data
				persistence.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mongoTenantDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractTenantDatastoreType">
				<xsd:attribute name="useBulkEventInserts" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Use MongoDB bulk APIs to insert events in
							batches.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="bulkInsertMaxChunkSize" type="sw:substitutableInt">
					<xsd:annotation>
						<xsd:documentation>When 'useBulkEventInserts' is true, specifies
							the maximum number of events to send in a single call.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Filter operation type -->
	<xsd:simpleType name="influxDbLogLevels">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none" />
			<xsd:enumeration value="basic" />
			<xsd:enumeration value="headers" />
			<xsd:enumeration value="full" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Attributes for configuring InfluxDB event storage -->
	<xsd:attributeGroup name="influxDbAttributes">
		<xsd:attribute name="connectUrl" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Url used to connect.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="username" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Username used to connect.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="password" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Password used to connect.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="database" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Database where events are stored.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="retention" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Retention identifier for events.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="logLevel" type="influxDbLogLevels"
			use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Indicates the amount of logging output for
					debugging interactions with InfluxDB.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="enableBatch" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>Enable batch delvery of events.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="batchChunkSize" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>Max number of events to cache before writing.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="batchIntervalMs" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>Max interval (in ms) to wait before writing.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Configuration data for a MongoDB tenant datastore with InfluxDB event 
		storage -->
	<xsd:element name="mongo-influxdb-tenant-datastore" type="mongoInfluxDbTenantDatastoreType"
		substitutionGroup="abstract-tenant-datastore">
		<xsd:annotation>
			<xsd:documentation>Hybrid tenant datastore that uses MongoDB for
				storing device management data and InfluxDB for storing event data.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mongoInfluxDbTenantDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractTenantDatastoreType">
				<xsd:attributeGroup ref="influxDbAttributes" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configuration data for a MongoDB tenant datastore with Hazelcast event 
		storage -->
	<xsd:element name="mongo-hazelcast-tenant-datastore" type="mongoHazelcastDbTenantDatastoreType"
		substitutionGroup="abstract-tenant-datastore">
		<xsd:annotation>
			<xsd:documentation>Hybrid tenant datastore that uses MongoDB for
				storing device management data and Hazelcast for storing event data.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mongoHazelcastDbTenantDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractTenantDatastoreType">
				<xsd:attribute name="expirationInMin" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Number of minutes events are kept in memory
							before they are evicted.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configuration data for an HBase tenant datastore -->
	<xsd:element name="hbase-tenant-datastore" type="hbaseTenantDatastoreType"
		substitutionGroup="abstract-tenant-datastore">
		<xsd:annotation>
			<xsd:documentation>Datastore that uses Apache HBase for tenant data
				persistence.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hbaseTenantDatastoreType">
		<xsd:complexContent>
			<xsd:extension base="abstractTenantDatastoreType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for device management caches to allow substitutionGroups -->
	<xsd:element name="abstract-cache" abstract="true"
		type="abstractCacheType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for device management cache
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common cache information -->
	<xsd:complexType name="abstractCacheType" />

	<!-- Configuration data for EHCache cache provider -->
	<xsd:element name="ehcache-device-management-cache" type="ehcacheDeviceManagementCacheType"
		substitutionGroup="abstract-cache">
		<xsd:annotation>
			<xsd:documentation>Device management cache that uses Ehcache for the
				underlying cache
				mechanism.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ehcacheDeviceManagementCacheType">
		<xsd:complexContent>
			<xsd:extension base="abstractCacheType">
				<xsd:attribute name="siteCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the site cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceSpecificationCacheMaxEntries"
					type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device
							specification cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceCacheMaxEntries" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceAssignmentCacheMaxEntries"
					type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Maximum number of entries in the device
							assignment cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="siteCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for site cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceSpecificationCacheTtl"
					type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device specification cache
							entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device cache entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="deviceAssignmentCacheTtl" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Time to live for device assignment cache
							entries.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configuration data for Hazelcast cache provider -->
	<xsd:element name="hazelcast-cache" type="hazelcastCacheType"
		substitutionGroup="abstract-cache">
		<xsd:annotation>
			<xsd:documentation>Device management cache that uses Hazelcast for
				the underlying cache
				mechanism.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastCacheType">
		<xsd:complexContent>
			<xsd:extension base="abstractCacheType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for device model initializers to allow substitutionGroups -->
	<xsd:element name="abstract-device-model-initializer"
		abstract="true" type="abstractDeviceModelInitializerType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for device model initializer
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common device model initializer information -->
	<xsd:complexType name="abstractDeviceModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>

	<!-- Default device model initializer -->
	<xsd:element name="default-device-model-initializer" type="defaultDeviceModelInitializerType"
		substitutionGroup="abstract-device-model-initializer">
		<xsd:annotation>
			<xsd:documentation>Device model initializer that loads the default
				device data
				referenced in many examples.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultDeviceModelInitializerType">
		<xsd:complexContent>
			<xsd:extension base="abstractDeviceModelInitializerType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Groovy device model initializer -->
	<xsd:element name="groovy-device-model-initializer" type="groovyDeviceModelInitializerType"
		substitutionGroup="abstract-device-model-initializer">
		<xsd:annotation>
			<xsd:documentation>Device model initializer that delegates creation
				logic to a Groovy
				script.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyDeviceModelInitializerType">
		<xsd:complexContent>
			<xsd:extension base="abstractDeviceModelInitializerType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that executes logic
							needed to create
							device model.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Creates default asset model data -->
	<xsd:complexType name="defaultAssetModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>

	<!-- Creates default schedule model data -->
	<xsd:complexType name="defaultScheduleModelInitializerType">
		<xsd:attribute name="initializeIfNoConsole" type="xsd:boolean"></xsd:attribute>
	</xsd:complexType>


	<!-- ========================== -->
	<!-- EVENT PROCESSING SUBSYSTEM -->
	<!-- ========================== -->

	<!-- Used as a placeholder for event processing subsystem implementations 
		to allow substitutionGroups -->
	<xsd:element name="abstract-event-processing-subsystem-implementation"
		abstract="true" type="abstractEventProcessingSubsystemType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for event processing subsystem
				implementation
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common information for event processing subsystem implementations -->
	<xsd:complexType name="abstractEventProcessingSubsystemType">
		<xsd:sequence>
			<xsd:element name="inbound-processing-strategy" type="inboundProcessingStrategyType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						The inbound processing strategy controls how
						events are moved from
						event sources into the inbound processing
						chain.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="inbound-processing-chain" type="inboundProcessingChainType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						A chain of processors through which all inbound
						device information
						is passed. Each processor handles some piece of
						processing and passes information on
						to the next.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="outbound-processing-strategy" type="outboundProcessingStrategyType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						The outbound processing strategy controls how
						stored events are
						moved into the outbound processing chain.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="outbound-processing-chain" type="outboundProcessingChainType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						A chain of processors through which all outbound
						device events are
						passed. Each processor handles some piece of
						processing and passes information on to
						the next.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Default event processing implementation -->
	<xsd:element name="event-processing" type="defaultEventProcessingSubsystemType"
		substitutionGroup="abstract-event-processing-subsystem-implementation">
		<xsd:annotation>
			<xsd:documentation>Specifies the default device communication
				subsystem implementation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultEventProcessingSubsystemType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventProcessingSubsystemType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains inbound processing strategy implementation -->
	<xsd:complexType name="inboundProcessingStrategyType">
		<xsd:sequence>
			<xsd:element ref="abstract-inbound-processing-strategy" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for inbound processing strategies to allow substitutionGroups -->
	<xsd:element name="abstract-inbound-processing-strategy"
		abstract="true" type="abstractInboundProcessingStrategyType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for inbound processing strategy
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common inbound processing strategy information -->
	<xsd:complexType name="abstractInboundProcessingStrategyType" />

	<!-- Configures the default inbound processing strategy -->
	<xsd:element name="default-inbound-processing-strategy"
		type="defaultInboundProcessingStrategyType" substitutionGroup="abstract-inbound-processing-strategy">
		<xsd:annotation>
			<xsd:documentation>DEPRECATED: Equivalent of
				blocking-queue-inbound-processing-strategy.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="blocking-queue-inbound-processing-strategy"
		type="defaultInboundProcessingStrategyType" substitutionGroup="abstract-inbound-processing-strategy">
		<xsd:annotation>
			<xsd:documentation>Configures the default inbound processing strategy
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultInboundProcessingStrategyType">
		<xsd:complexContent>
			<xsd:extension base="abstractInboundProcessingStrategyType">
				<xsd:attribute name="maxQueueSize" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Controls the maximum number of inbound events
							that can be queued
							before blocking occurs.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numEventProcessorThreads" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Controls the number of threads that submit
							queued events to the
							inbound processing chain.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="enableMonitoring" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Enables monitoring output for debugging event
							processing.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="monitoringIntervalSec" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Number of seconds between monitoring log
							statements. The
							'enableMonitoring' attribute must be set to true
							for this to have an effect.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains outbound processing strategy implementation -->
	<xsd:complexType name="outboundProcessingStrategyType">
		<xsd:sequence>
			<xsd:element ref="abstract-outbound-processing-strategy" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound processing strategies to allow substitutionGroups -->
	<xsd:element name="abstract-outbound-processing-strategy"
		abstract="true" type="abstractOutboundProcessingStrategyType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound processing strategy
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common outbound processing strategy information -->
	<xsd:complexType name="abstractOutboundProcessingStrategyType" />

	<!-- Configures the default inbound processing strategy -->
	<xsd:element name="default-outbound-processing-strategy"
		type="blockingQueueOutboundProcessingStrategyType" substitutionGroup="abstract-outbound-processing-strategy">
		<xsd:annotation>
			<xsd:documentation>DEPRECATED: Equivalent of
				blocking-queue-outbound-processing-strategy.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="blocking-queue-outbound-processing-strategy"
		type="blockingQueueOutboundProcessingStrategyType" substitutionGroup="abstract-outbound-processing-strategy">
		<xsd:annotation>
			<xsd:documentation>Uses a fixed-length queue to store events to be
				submitted to the
				outbound processing chain and a fixed pool of
				threads to process the queue.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="blockingQueueOutboundProcessingStrategyType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessingStrategyType">
				<xsd:attribute name="maxQueueSize" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Controls the maximum number of outbound events
							that can be queued
							before blocking occurs.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numEventProcessorThreads" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>Controls the number of threads that submit
							queued events to the
							outbound processing chain.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for inbound processor elements to allow substitutionGroups -->
	<xsd:element name="abstract-inbound-processor" abstract="true"
		type="abstractInboundProcessorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for inbound processor elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common inbound processor element information -->
	<xsd:complexType name="abstractInboundProcessorType" />

	<xsd:complexType name="inboundProcessingChainType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="inbound-event-processor" type="inboundProcessorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom inbound event processor
							implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element ref="abstract-inbound-processor" />
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="inboundProcessorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Event storage processor -->
	<xsd:element name="event-storage-processor" type="eventStorageProcessorType"
		substitutionGroup="abstract-inbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Stores device events via the device management
				implementation. If
				not configured, all events from inbound processing
				will be ignored. This does not
				affect ability to create events via
				REST calls.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventStorageProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractInboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Registration processor -->
	<xsd:element name="registration-processor" type="registrationProcessorType"
		substitutionGroup="abstract-inbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Provides device registration functionality. If
				this processor is not
				enabled, device registration requests will be
				ignored.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="registrationProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractInboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Device stream processor -->
	<xsd:element name="device-stream-processor" type="deviceStreamProcessorType"
		substitutionGroup="abstract-inbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Provides support for creating and writing to
				device streams. If this
				processor is not enabled, device stream
				requests will be ignored.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="deviceStreamProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractInboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Hazelcast queue processor -->
	<xsd:element name="hazelcast-queue-processor" type="hazelcastQueueProcessorType"
		substitutionGroup="abstract-inbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends all events to a Hazelcast queue. Generally,
				if this processor
				is configured, the other processors such as storage
				and registration are not used
				since the subordinate SiteWhere
				instances listening on the queue will be taking care
				of storage and
				registration.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastQueueProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractInboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound processor filter elements to allow 
		substitutionGroups -->
	<xsd:element name="abstract-outbound-processor-filter"
		abstract="true" type="abstractOutboundProcessorFilterType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound processor filter
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common outbound processor filter element information -->
	<xsd:complexType name="abstractOutboundProcessorFilterType" />

	<!-- Filter operation type -->
	<xsd:simpleType name="filterOperationType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="include" />
			<xsd:enumeration value="exclude" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Filters outbound events associated with a site -->
	<xsd:element name="site-filter" type="siteFilterType"
		substitutionGroup="abstract-outbound-processor-filter">
		<xsd:annotation>
			<xsd:documentation>
				Includes or excludes device events depending on
				whether the device
				is associated with a given site.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="siteFilterType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorFilterType">
				<xsd:attribute name="site" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique token for the site to be filtered.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="operation" type="filterOperationType"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Indicates whether matches should be included or
							excluded from the
							result set.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Filters outbound events associated with a device specification -->
	<xsd:element name="specification-filter" type="specificationFilterType"
		substitutionGroup="abstract-outbound-processor-filter">
		<xsd:annotation>
			<xsd:documentation>
				Includes or excludes device events depending on
				whether the device
				is based on a given specififation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="specificationFilterType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorFilterType">
				<xsd:attribute name="specification" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique token for the specification to be
							filtered.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="operation" type="filterOperationType"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Indicates whether matches should be included or
							excluded from the
							result set.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Chooses events to filter based on a Groovy script -->
	<xsd:element name="groovy-filter" type="groovyFilterType"
		substitutionGroup="abstract-outbound-processor-filter">
		<xsd:annotation>
			<xsd:documentation>
				Executes a Groovy script which should return a
				boolean result. True
				indicates the event is to be included in the
				result set, false indicates it should be
				filtered.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyFilterType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorFilterType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Script that determines whether events are
							included or filtered.
							The script should return true if the event
							is to be included or false if the event
							is to be filtered.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Element that contains a list of outbound processor filters -->
	<xsd:complexType name="outboundProcessorFilterList">
		<xsd:sequence>
			<xsd:element ref="abstract-outbound-processor-filter"
				minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound multicaster elements to allow substitutionGroups -->
	<xsd:element name="abstract-outbound-multicaster" abstract="true"
		type="abstractOutboundMulticasterType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound multicaster elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common multicaster element information -->
	<xsd:complexType name="abstractOutboundMulticasterType" />

	<!-- Multicasts events to all devices that use a given specification -->
	<xsd:element name="all-with-specification-multicaster"
		type="allWithSpecificationMulticasterType" substitutionGroup="abstract-outbound-multicaster">
		<xsd:annotation>
			<xsd:documentation>
				Multicasts to all devices that use a given
				specification.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="allWithSpecificationMulticasterType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundMulticasterType">
				<xsd:attribute name="specification" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique token for device specification.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that returns a String
							value indicating
							the calculated route or null if event should not
							be routed.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound route builder elements to allow 
		substitutionGroups -->
	<xsd:element name="abstract-outbound-route-builder"
		abstract="true" type="abstractOutboundRouteBuilderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound route builder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common route builder element information -->
	<xsd:complexType name="abstractOutboundRouteBuilderType" />

	<!-- Routes events based on results from a Groovy script -->
	<xsd:element name="groovy-route-builder" type="groovyRouteBuilderType"
		substitutionGroup="abstract-outbound-route-builder">
		<xsd:annotation>
			<xsd:documentation>
				Uses Groovy script to build outbound route.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyRouteBuilderType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundRouteBuilderType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that returns a String
							value indicating
							the calculated route.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for outbound processor elements to allow substitutionGroups -->
	<xsd:element name="abstract-outbound-processor" abstract="true"
		type="abstractOutboundProcessorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for outbound processor elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common outbound processor element information -->
	<xsd:complexType name="abstractOutboundProcessorType" />

	<!-- Adds ability to add nested filters for outbound processors -->
	<xsd:complexType name="filteredOutboundProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractOutboundProcessorType">
				<xsd:sequence>
					<xsd:element name="filters" type="outboundProcessorFilterList"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								List of filters that will be applied to
								outbound traffic.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="outboundProcessingChainType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="outbound-event-processor" type="outboundProcessorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom outbound event processor
							implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element ref="abstract-outbound-processor" />
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="outboundProcessorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Provisioning outbound event processor -->
	<xsd:element name="provisioning-event-processor" type="commandDeliveryEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				DEPRECATED: Use 'command-delivery-event-processor'
				instead.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Command delivery outbound event processor -->
	<xsd:element name="command-delivery-event-processor" type="commandDeliveryEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Hands off outbound device command events to the
				device communication
				subsystem. If this event processor is not
				configured, no commands will be sent to
				devices.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="commandDeliveryEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:attribute name="numThreads" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Sets the number of threads used to process
							provisioning commands.
							Increase for situations where the load of
							device commands is high.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Zone test outbound event processor -->
	<xsd:element name="zone-test-event-processor" type="zoneTestOutboundEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				For each location event, applies a series of tests
				to determine
				whether the location meets a condition of being inside
				or outside of a given zone. If
				the condition is met, an alert is
				fired.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="zoneTestOutboundEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:sequence>
					<xsd:element name="zone-test" type="zoneTestType"
						maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								Tests a location for inclusion/exclusion from
								a zone and fires
								an alert if the condition is met.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- MQTT outbound event processor -->
	<xsd:element name="mqtt-event-processor" type="mqttEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to an MQTT topic.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mqttEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:sequence>
					<xsd:element ref="abstract-outbound-multicaster"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Allows a multicaster to be configured so that
								events can be
								broadcast to many different topics.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element ref="abstract-outbound-route-builder"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Allows customization of route building logic.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attributeGroup ref="mqtt-broker-attributes" />
				<xsd:attribute name="topic" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							MQTT topic used if no multicaster or route
							builder is configured.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- RabbitMQ outbound event processor -->
	<xsd:element name="rabbit-mq-event-processor" type="rabbitMqEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to a RabbitMQ exchange.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="rabbitMqEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:sequence>
					<xsd:element ref="abstract-outbound-multicaster"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Allows a multicaster to be configured so that
								events can be
								broadcast to many different exchanges.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element ref="abstract-outbound-route-builder"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Allows customization of route building logic.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="connectionUri" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							URI that provides information about the
							RabbitMQ instance to
							connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="topic" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Name of topic to publish to if route builder is
							not
							configured.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Hazelcast outbound event processor -->
	<xsd:element name="hazelcast-event-processor" type="hazelcastEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to Hazelcast topics for
				processing by external
				consumers.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Groovy outbound event processor -->
	<xsd:element name="groovy-event-processor" type="groovyEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Delegates event processing to a Groovy script. The
				script can apply
				conditional logic or interact with SiteWhere
				interfaces to create new events or
				perform other tasks.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="groovyEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for processing each event.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Solr outbound event processor -->
	<xsd:element name="solr-event-processor" type="solrEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to Apache Solr for indexing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="solrEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Azure EventHub outbound event processor -->
	<xsd:element name="azure-eventhub-event-processor" type="azureEventHubEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends outbound events to an Azure EventHub using
				AMQP 1.0.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="azureEventHubEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:attribute name="sasName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Sets the identity used for SAS authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="sasKey" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Sets the key used for SAS authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="serviceBusName" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Set the service bus to connect to (e.g.
							xxx.servicebus.windows.net).
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="eventHubName" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name of EventHub to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- InitialState.com outbound event processor -->
	<xsd:element name="initial-state-event-processor" type="initialStateEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends events to the InitialState.com cloud service
				where they can be
				viewed in a customized dashboard.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="initialStateEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:attribute name="streamingAccessKey" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Access key obtained from the InitialState.com
							website that
							specifies the account that the events will be
							associated with.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Dweet.io outbound event processor -->
	<xsd:element name="dweet-io-event-processor" type="dweetIoEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends events to the Dweet.io cloud service where
				they can be viewed
				and integrated with other services.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="dweetIoEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Amazon SQS outbound event processor -->
	<xsd:element name="amazon-sqs-event-processor" type="amazonSqsEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Forwards outbound events to Amazon SQS.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="amazonSqsEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:attribute name="accessKey" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Amazon AWS access key for account owning SQS
							queue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="secretKey" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Amazon AWS secret key for account owning SQS
							queue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueUrl" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique URL for SQS queue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- WSO2 CEP event processor -->
	<xsd:element name="wso2-cep-event-processor" type="wso2CepEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Sends events to streams on an external WSO2 CEP
				instance for
				processing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="wso2CepEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:attribute name="hostname" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Hostname for external WSO2 CEP instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="port" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Port number for external WSO2 CEP instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="username" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Username for external WSO2 CEP instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="password" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Password for external WSO2 CEP instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Siddhi CEP outbound event processor -->
	<xsd:element name="siddhi-event-processor" type="siddhiEventProcessorType"
		substitutionGroup="abstract-outbound-processor">
		<xsd:annotation>
			<xsd:documentation>
				Processes events through an embedded Siddhi
				instance to allow
				complex event processing (CEP) funcitonality.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="siddhiEventProcessorType">
		<xsd:complexContent>
			<xsd:extension base="filteredOutboundProcessorType">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="unbounded" name="siddhi-query"
						type="siddhiQueryType">
						<xsd:annotation>
							<xsd:documentation>
								A Siddhi query that executes selector logic.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for Siddhi callbacks to allow substitutionGroups -->
	<xsd:element name="abstract-siddhi-callback" abstract="true"
		type="abstractSiddhiCallbackType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for Siddhi callback elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common Siddhi callback element information -->
	<xsd:complexType name="abstractSiddhiCallbackType">
		<xsd:attribute name="stream" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Name of stream for which a callback will be
					registered.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Siddhi debug callback -->
	<xsd:element name="stream-debugger" type="siddhiStreamDebuggerType"
		substitutionGroup="abstract-siddhi-callback">
		<xsd:annotation>
			<xsd:documentation>
				Debugs Siddhi streams by printing events to the
				log.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="siddhiStreamDebuggerType">
		<xsd:complexContent>
			<xsd:extension base="abstractSiddhiCallbackType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Siddhi Groovy stream processor -->
	<xsd:element name="groovy-stream-processor" type="siddhiGroovyStreamProcessorType"
		substitutionGroup="abstract-siddhi-callback">
		<xsd:annotation>
			<xsd:documentation>
				Processes events from a Siddhi stream using a
				Groovy script.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="siddhiGroovyStreamProcessorType">
		<xsd:complexContent>
			<xsd:extension base="abstractSiddhiCallbackType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for processing each event.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="siddhiQueryType">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded"
				ref="abstract-siddhi-callback" />
		</xsd:sequence>
		<xsd:attribute name="selector" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Selector expression that contains processing
					logic.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:simpleType name="zoneContainmentType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="inside" />
			<xsd:enumeration value="outside" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="alertLevelType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="info" />
			<xsd:enumeration value="warning" />
			<xsd:enumeration value="error" />
			<xsd:enumeration value="critical" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="zoneTestType">
		<xsd:attribute name="zoneToken" type="xsd:string" use="required"></xsd:attribute>
		<xsd:attribute name="condition" type="zoneContainmentType"
			use="required" />
		<xsd:attribute name="alertType" type="xsd:string" use="required"></xsd:attribute>
		<xsd:attribute name="alertLevel" type="alertLevelType"
			use="optional" />
		<xsd:attribute name="alertMessage" type="xsd:string"
			use="required"></xsd:attribute>
	</xsd:complexType>


	<!-- ============================== -->
	<!-- DEVICE COMMUNICATION SUBSYSTEM -->
	<!-- ============================== -->

	<!-- Used as a placeholder for communication subsystem implementations to 
		allow substitutionGroups -->
	<xsd:element name="abstract-communication-subsystem-implementation"
		abstract="true" type="abstractCommunicationSubsystemType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for device communication subsystem
				implementation
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common information for device communication subsystem implementations -->
	<xsd:complexType name="abstractCommunicationSubsystemType">
		<xsd:sequence>
			<xsd:element name="event-sources" type="eventSourcesType">
				<xsd:annotation>
					<xsd:documentation>
						Event sources receive and decode events so that
						they may be
						processed by SiteWhere.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="inbound-processing-strategy" type="inboundProcessingStrategyType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						DEPRECATED: Inbound processing strategy has been
						moved into the
						event processing subsystem.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="outbound-processing-strategy" type="outboundProcessingStrategyType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						DEPRECATED: Outbound processing strategy has
						been moved into the
						event processing subsystem.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="registration" type="deviceServicesType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						DEPRECATED: Registration has been renamed to
						'device services' to
						allow for the addition of other services.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="device-services" type="deviceServicesType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Contains various device-related services such as
						registration and
						symbology management.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="batch-operations" type="batchOperationsType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Batch operations are operations executed on a
						large number of
						devices concurrently in an asynchronous fashion.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="command-routing" type="commandRoutingType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Command routing determines which destination is
						used for
						processing a given command invocation.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="command-destinations" type="commandDestinationsType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Command destinations process command invocation
						events, encoding
						them then delivering them to devices.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- DEPRECATED: provisioning was renamed device-communication -->
	<xsd:element name="provisioning" type="defaultCommunicationSubsystemType"
		substitutionGroup="abstract-communication-subsystem-implementation">
		<xsd:annotation>
			<xsd:documentation>DEPRECATED: Left for backward compatibility. Use
				'device-communication' element instead.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Default device communication implementation -->
	<xsd:element name="device-communication" type="defaultCommunicationSubsystemType"
		substitutionGroup="abstract-communication-subsystem-implementation">
		<xsd:annotation>
			<xsd:documentation>Specifies the default device communication
				subsystem implementation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultCommunicationSubsystemType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommunicationSubsystemType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains information about inbound event sources -->
	<xsd:complexType name="eventSourcesType">
		<xsd:sequence>
			<xsd:element ref="abstract-event-source" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for decoders to allow substitutionGroups -->
	<xsd:element name="abstract-decoder" abstract="true"
		type="abstractDecoderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for decoder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common decoder information -->
	<xsd:complexType name="abstractDecoderType" />

	<!-- Reference to an event decoder defined as a Spring bean -->
	<xsd:element name="event-decoder" type="eventDecoderReferenceType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>References a decoder defined in an external bean
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventDecoderReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode using the standard SiteWhere Google Protocol Buffer definition -->
	<xsd:element name="protobuf-event-decoder" type="swProtobufDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that expects a message in the SiteWhere
				Google Protocol
				Buffer format.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swProtobufDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode using the standard SiteWhere JSON device interaction representation -->
	<xsd:element name="json-device-request-decoder" type="swJsonDeviceRequestDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that parses requests from devices.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJsonDeviceRequestDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode using the standard SiteWhere JSON batch representation -->
	<xsd:element name="json-event-decoder" type="swJsonEventBatchDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>DEPRECATED: Use json-batch=event-decoder for JSON
				batch event
				processing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="json-batch-event-decoder" type="swJsonEventBatchDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that parses batches of device events.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJsonEventBatchDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode binary payload using a Groovy script -->
	<xsd:element name="groovy-event-decoder" type="swGroovyDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that uses a Groovy script to parse a
				binary payload into
				decoded events.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for decoding payload.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Decode String payload using a Groovy script -->
	<xsd:element name="groovy-string-event-decoder" type="swGroovyStringDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that uses a Groovy script to parse a
				String payload into
				decoded events.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyStringDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to script used for decoding payload.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Echo String payload for debugging purposes -->
	<xsd:element name="echo-string-decoder" type="swEchoStringDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder for event receivers with String payloads
				that simply echoes
				the payload to the log.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swEchoStringDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for device metadata extractors to allow substitutionGroups -->
	<xsd:element name="abstract-device-metadata-extractor"
		abstract="true" type="abstractDeviceMetadataExtractorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for device metadata extractor
				elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common device metadata extractor information -->
	<xsd:complexType name="abstractDeviceMetadataExtractorType" />

	<!-- Groovy device metadata extractor -->
	<xsd:element name="groovy-device-metadata-extractor" type="swGroovyDeviceMetadataExtractorType"
		substitutionGroup="abstract-device-metadata-extractor">
		<xsd:annotation>
			<xsd:documentation>Uses a Groovy script to extract device/payload
				information from a message.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyDeviceMetadataExtractorType">
		<xsd:complexContent>
			<xsd:extension base="abstractDeviceMetadataExtractorType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that extracts metadata
							such as hardware id from the message.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for composite decoder choices to allow substitutionGroups -->
	<xsd:element name="abstract-decoder-choice" abstract="true"
		type="abstractCompositeDecoderChoiceType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder a choice available to a composite
				decoder.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common composite decoder choice information -->
	<xsd:complexType name="abstractCompositeDecoderChoiceType">
		<xsd:sequence>
			<xsd:element ref="abstract-decoder">
				<xsd:annotation>
					<xsd:documentation>Decoder used if choice criteria is met.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Composite decoder choice based on device specification -->
	<xsd:element name="device-specification-decoder-choice"
		type="swDeviceSpecificationDecoderChoiceType" substitutionGroup="abstract-decoder-choice">
		<xsd:annotation>
			<xsd:documentation>Uses device specification token as the criteria
				for choosing the associated decoder.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swDeviceSpecificationDecoderChoiceType">
		<xsd:complexContent>
			<xsd:extension base="abstractCompositeDecoderChoiceType">
				<xsd:attribute name="token" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Token for device specification to match.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- List of choices for a composite event decoder -->
	<xsd:complexType name="swCompositeDecoderChoicesType">
		<xsd:sequence>
			<xsd:element ref="abstract-decoder-choice" minOccurs="0"
				maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Decoder that extracts metadata and delegates to sub-decoders -->
	<xsd:element name="composite-decoder" type="swCompositeDecoderType"
		substitutionGroup="abstract-decoder">
		<xsd:annotation>
			<xsd:documentation>Decoder that extracts metadata from the initial
				message in order to determine which of a list of sub-decoders should
				be used to decode the message.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swCompositeDecoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractDecoderType">
				<xsd:all>
					<xsd:element ref="abstract-device-metadata-extractor" />
					<xsd:element name="choices" type="swCompositeDecoderChoicesType"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								List of choices available for the composite
								decoder.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:all>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for event sources to allow substitutionGroups -->
	<xsd:element name="abstract-event-source" abstract="true"
		type="abstractEventSourceType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for event source elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common event source information -->
	<xsd:complexType name="abstractEventSourceType" />

	<!-- Attributes common to all event sources -->
	<xsd:attributeGroup name="event-source-attributes">
		<xsd:attribute name="sourceId" type="xsd:token" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for event source.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Reference to an event source defined in Spring beans -->
	<xsd:element name="event-source" type="eventSourceReferenceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source defined externally as a Spring bean
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="eventSourceReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that pulls binary information from an MQTT topic and decodes 
		it -->
	<xsd:element name="mqtt-event-source" type="mqttEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from an
				MQTT topic and
				decodes it
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="mqttEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder" />
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attributeGroup ref="mqtt-broker-attributes" />
				<xsd:attribute name="topic" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							MQTT topic used to deliver inbound events.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Attributes used for inbound MQTT processing -->
	<xsd:attributeGroup name="mqtt-broker-attributes">
		<xsd:attribute name="protocol" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					MQTT protocol (defaults to tcp).
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="hostname" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					MQTT broker hostname.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="port" type="sw:substitutableInt"
			use="optional">
			<xsd:annotation>
				<xsd:documentation>
					MQTT broker port.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="username" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					MQTT broker username.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="password" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					MQTT broker password.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="trustStorePath" type="xsd:string"
			use="optional">
			<xsd:annotation>
				<xsd:documentation>
					For secured connections. Provides the full path
					to the Java
					TrustStore used for the secure connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="trustStorePassword" type="xsd:string"
			use="optional">
			<xsd:annotation>
				<xsd:documentation>
					For secured connections. Provides the password to
					the Java
					TrustStore used for the secure connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Event source that pulls binary information from a RabbitMQ queue and 
		decodes it -->
	<xsd:element name="rabbit-mq-event-source" type="rabbitMqEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from a
				RabbitMQ queue and
				decodes it.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="rabbitMqEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder" />
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attribute name="connectionUri" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							URI that provides information about the
							RabbitMQ instance to
							connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Name of RabbitMQ queue to be consumed.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="durable" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>
							Indicates whether the queue should survive
							broker restarts.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numConsumers" type="xsd:int">
					<xsd:annotation>
						<xsd:documentation>
							Number of consumer threads used to consume the
							queue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that pulls binary information from an EventHub endpoint 
		and decodes it -->
	<xsd:element name="azure-eventhub-event-source" type="azureEventhubEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from an
				Azure EventHub
				endpoint and
				decodes it
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="azureEventhubEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder" />
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attributeGroup ref="azure-eventhub-inbound-attributes" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Attributes used for inbound eventhub processing -->
	<xsd:attributeGroup name="azure-eventhub-inbound-attributes">
		<xsd:attribute name="targetFqn" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					EventHub targetFqn address.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="namespace" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					EventHub namespace.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="entityPath" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					EventHub entityPath.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="partitionCount" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>
					EventHub partition count.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="zkStateStore" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					zookeeper store url for EventHub state
					persistence.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="username" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					username for EventHub connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="password" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					password for EventHub connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- Event source that creates an embedded ActiveMQ broker -->
	<xsd:element name="activemq-event-source" type="activemqEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that creates an embedded ActiveMQ
				broker and listens
				for messages on a transport specified by the
				transport URI.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="activemqEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder" />
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attribute name="transportUri" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							URI used to configure the transport for the
							embedded ActiveMQ
							broker.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="dataDirectory" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Data directory used to store persistent message
							queues.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name of JMS queue for consumers to pull
							messages from.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numConsumers" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Number of consumers used to read data from the
							queue into
							SiteWhere.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that reads messages from a remote ActiveMQ source -->
	<xsd:element name="activemq-client-event-source" type="activeMQClientEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source connects to a remote broker and
				consumes messages from
				it.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="activeMQClientEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder" />
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attribute name="remoteUri" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							URI of remote broker to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="queueName" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name of JMS queue for consumers to pull
							messages from.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numConsumers" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Number of consumers used to read data from the
							queue into
							SiteWhere.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that pulls decoded events from a Hazelcast queue -->
	<xsd:element name="hazelcast-queue-event-source" type="hazelcastQueueEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls decoded events from a
				Hazelcast queue.
				Primarily used to allow one instance of SiteWhere to
				decode events and feed them to
				multiple subordinate instances for
				processing.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="hazelcastQueueEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:attributeGroup ref="event-source-attributes" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that polls REST services for data -->
	<xsd:element name="polling-rest-event-source" type="pollingRestEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that supports connecting to REST
				services and parsing
				the response data with a Groovy script in order
				to generate event payloads.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="pollingRestEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder" />
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attribute name="pollIntervalMs" type="xsd:int"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Interval (in milliseconds) to wait between
							polling requests.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that executes logic
							needed to generate REST request and parse response.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="baseUrl" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Base URL used for REST requests. Within Groovy
							script, any REST
							calls are assumed relative to this base value.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="username" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Username if REST services requires
							authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="password" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Password if REST services requires
							authentication.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Reference to an interaction handler factory defined in a Spring bean -->
	<xsd:complexType name="interactionHandlerFactoryReferenceType">
		<xsd:attribute name="ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Bean that implements the
					ISocketInteractionHandler interface.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Reads all of the client data from the socket and returns a byte array -->
	<xsd:complexType name="readAllInteractionHandlerFactoryType">
	</xsd:complexType>

	<!-- Treats socket input as HTTP request and processes entity payload -->
	<xsd:complexType name="httpInteractionHandlerFactoryType">
	</xsd:complexType>

	<!-- Hands off socket interaction processing to a Groovy script -->
	<xsd:complexType name="groovyInteractionHandlerFactoryType">
		<xsd:attribute name="scriptPath" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Path to a Groovy script that handles socket
					interactions.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Event source that pulls binary information from a server socket and 
		decodes it -->
	<xsd:element name="socket-event-source" type="socketEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls binary information from
				connections to a
				TCP/IP server socket.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="socketEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element name="interaction-handler-factory"
							type="interactionHandlerFactoryReferenceType">
							<xsd:annotation>
								<xsd:documentation>Reference to an interaction handler factory
									defined in an
									external Spring bean. Factory must implement
									ISocketInteractionHandlerFactory
									interface.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="read-all-interaction-handler-factory"
							type="readAllInteractionHandlerFactoryType">
							<xsd:annotation>
								<xsd:documentation>Interaction handler that reads all content
									from the client
									socket and delivers it to the decoder as a byte
									array.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="http-interaction-handler-factory"
							type="httpInteractionHandlerFactoryType">
							<xsd:annotation>
								<xsd:documentation>Interaction handler that treats a socket
									request as an HTTP
									message and delivers the entity payload to
									the decoder as a byte array. A 200 OK
									response is sent back to
									the requestor.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="groovy-interaction-handler-factory"
							type="groovyInteractionHandlerFactoryType">
							<xsd:annotation>
								<xsd:documentation>Interaction handler that hands off socket
									interactions to a
									Groovy script.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
					<xsd:element ref="abstract-decoder" />
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attribute name="port" type="xsd:int" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Port on which the server socket will listen.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="numThreads" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Number of threads used to handle client
							connections to the server
							socket.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Contains web socket header information -->
	<xsd:complexType name="webSocketHeaderType">
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Header name.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="value" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Header value.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Types of payloads that may be processed by a web socket event source -->
	<xsd:simpleType name="webSocketPayloadType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="binary" />
			<xsd:enumeration value="string" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Event source that pulls data from a web socket and decodes it -->
	<xsd:element name="web-socket-event-source" type="webSocketEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that pulls data from a web socket.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="webSocketEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder" />
					<xsd:element name="header" type="webSocketHeaderType"
						minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>Header that is passed to the web socket for
								configuration.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attribute name="webSocketUrl" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							URL of the web socket to connect to.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="payloadType" type="webSocketPayloadType"
					use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Event source that accepts CoAP requests for SiteWhere resources -->
	<xsd:element name="coap-server-event-source" type="coapServerEventSourceType"
		substitutionGroup="abstract-event-source">
		<xsd:annotation>
			<xsd:documentation>Event source that accepts CoAP requests for
				SiteWhere resources.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="coapServerEventSourceType">
		<xsd:complexContent>
			<xsd:extension base="abstractEventSourceType">
				<xsd:sequence>
					<xsd:element ref="abstract-decoder" />
				</xsd:sequence>
				<xsd:attributeGroup ref="event-source-attributes" />
				<xsd:attribute name="hostname" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Hostname used when binding CoAP server socket.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="port" type="xsd:integer" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Port used when binding CoAP server socket.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="deviceServicesType">
		<xsd:sequence>
			<xsd:element ref="abstract-registration-manager"
				minOccurs="0" />
			<xsd:element name="symbol-generator-manager" type="symbolGeneratorManagerType"
				minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Configures the symbol generator manager.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="abstract-presence-manager" minOccurs="0" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Used as a placeholder for registration manager elements to allow substitutionGroups -->
	<xsd:element name="abstract-registration-manager" abstract="true"
		type="abstractRegistrationManagerType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for registration manager elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common registration manager element information -->
	<xsd:complexType name="abstractRegistrationManagerType" />

	<!-- Registration manager reference -->
	<xsd:element name="registration-manager" type="registrationManagerReferenceType"
		substitutionGroup="abstract-registration-manager">
		<xsd:annotation>
			<xsd:documentation>
				Allows a custom registration manager to be
				installed.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="registrationManagerReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractRegistrationManagerType">
				<xsd:attribute name="ref" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Identifies bean that implements registration
							manager.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Default registration manager implementation -->
	<xsd:element name="default-registration-manager" type="defaultRegistrationManagerType"
		substitutionGroup="abstract-registration-manager">
		<xsd:annotation>
			<xsd:documentation>
				Installs the default registration manager
				implementation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultRegistrationManagerType">
		<xsd:complexContent>
			<xsd:extension base="abstractRegistrationManagerType">
				<xsd:attribute name="allowNewDevices" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Indicates whether new devices should be allowed
							to register. If
							set
							to false, devices not already in the system
							will be rejected.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="autoAssignSite" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Indicates whether the site should automatically
							be chosen if not
							passed with registration request.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="autoAssignToken" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>Token for site used in auto assignment. If not
							set and
							'autoAssignSite' is set to true, the first site will be
							used.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for symbol generator elements to allow substitutionGroups -->
	<xsd:element name="abstract-symbol-generator" abstract="true"
		type="abstractSymbolGeneratorType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for symbol generator elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common symbol generator element information -->
	<xsd:complexType name="abstractSymbolGeneratorType" />

	<!-- Configures the symbol generator manager -->
	<xsd:complexType name="symbolGeneratorManagerType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element ref="abstract-symbol-generator" />
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<!-- QR code symbol generator -->
	<xsd:element name="qr-code-symbol-generator" type="qrCodeSymbolGeneratorType"
		substitutionGroup="abstract-symbol-generator">
		<xsd:annotation>
			<xsd:documentation>
				Generates QR-Code symbols for SiteWhere entities.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="qrCodeSymbolGeneratorType">
		<xsd:complexContent>
			<xsd:extension base="abstractSymbolGeneratorType">
				<xsd:attribute name="id" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Unique id for generator.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="name" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Name for generator.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="width" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Width of QR code image.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="height" type="xsd:int" use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Height of QR code image.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="backgroundColor" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Background color for QR code image.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="foregroundColor" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Foreground color for QR code image.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Used as a placeholder for presence manager elements to allow substitutionGroups -->
	<xsd:element name="abstract-presence-manager" abstract="true"
		type="abstractPresenceManagerType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for presence manager elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common presence manager element information -->
	<xsd:complexType name="abstractPresenceManagerType" />

	<!-- Default presence manager implementation -->
	<xsd:element name="default-presence-manager" type="defaultPresenceManagerType"
		substitutionGroup="abstract-presence-manager">
		<xsd:annotation>
			<xsd:documentation>
				Default presence manager implementation.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="defaultPresenceManagerType">
		<xsd:complexContent>
			<xsd:extension base="abstractPresenceManagerType">
				<xsd:attribute name="checkInterval" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Amount of time to wait between presence check
							cycles. Uses
							ISO8601 duration format. (e.g. T1H30M is 1 hour and
							30 minutes)
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="presenceMissingInterval" type="xsd:string"
					use="optional">
					<xsd:annotation>
						<xsd:documentation>
							Amount of time since last interaction date at
							which a device is
							considered non-present. Uses ISO8601 duration
							format. (e.g. P2DT3H5M20S is 2 days,
							3 hours, 5 minutes, and 20
							seconds)
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="batchOperationsType">
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:element name="batch-operation-manager" type="batchOperationManagerReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom batch operation manager
							implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="default-batch-operation-manager"
					type="defaultBatchOperationManagerType">
					<xsd:annotation>
						<xsd:documentation>
							Configures the default batch operation manager
							implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="batchOperationManagerReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="defaultBatchOperationManagerType">
		<xsd:attribute name="throttleDelayMs" type="xsd:int">
			<xsd:annotation>
				<xsd:documentation>Indicates the amount of time in milliseconds
					between command
					invocations when invoking a batch of commands. Used
					to lower system load generated by
					submitting a large number of
					command invocations concurrently.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandRoutingType">
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:element name="command-router" type="commandRouterReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command router
							implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="specification-mapping-router" type="specificationMappingRouterType">
					<xsd:annotation>
						<xsd:documentation>
							Command router that distributes commands to
							destinations based on
							a mapping of specification token to command
							agent id.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="commandRouterReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="specificationMappingRouterType">
		<xsd:sequence>
			<xsd:element name="mapping" type="specificationMappingRouterMappingType"
				minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Mapping of a specification token to a
						destination id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="defaultDestination" type="xsd:token"
			use="optional">
			<xsd:annotation>
				<xsd:documentation>
					Allows a default destination to be set for
					specifications that do
					not have a specific mapping.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="specificationMappingRouterMappingType">
		<xsd:attribute name="specification" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="destination" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Enumerates available command agent choices -->
	<xsd:complexType name="commandDestinationsType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="command-destination" type="commandDestinationReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command destination
							implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="mqtt-command-destination" type="mqttCommandDestinationType">
					<xsd:annotation>
						<xsd:documentation>
							Destination that delivers commands via MQTT.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="coap-command-destination" type="coapCommandDestinationType">
					<xsd:annotation>
						<xsd:documentation>
							Destination that delivers commands via CoAP
							client request.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="twilio-command-destination" type="twilioCommandDestinationType">
					<xsd:annotation>
						<xsd:documentation>
							Destination that delivers commands via Twilio
							SMS messages.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Attributes common to all command destinations -->
	<xsd:attributeGroup name="command-destination-attributes">
		<xsd:attribute name="destinationId" type="xsd:token"
			use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique identifier for command destination.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<!-- References command destination defined in a Spring bean -->
	<xsd:complexType name="commandDestinationReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Used as a placeholder for command encoders to allow substitutionGroups -->
	<xsd:element name="abstract-command-encoder" abstract="true"
		type="abstractCommandEncoderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for command encoder elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common command encoder information -->
	<xsd:complexType name="abstractCommandEncoderType" />

	<!-- Reference to a command encoder defined as a Spring bean -->
	<xsd:element name="command-encoder" type="commandEncoderReferenceType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>References a command encoder defined in an
				external bean
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="commandEncoderReferenceType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
				<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using standard SiteWhere Google Protocol Buffer naming 
		convention -->
	<xsd:element name="protobuf-command-encoder" type="swProtobufCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes commands based on
				standard SiteWhere
				Google Protocol Buffer naming convention.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swProtobufCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using protbuf for system commands and Java serialization 
		for custom commands -->
	<xsd:element name="java-protobuf-hybrid-encoder" type="swJavaProtobufHybridEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes system commands using
				protocol buffers but encodes custom commands using serialized Java
				objects. This allows Java clients to use the commands directly
				rather than having to recompile stubs based on a proto.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJavaProtobufHybridEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using JSON serialization -->
	<xsd:element name="json-command-encoder" type="swJsonCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that encodes both system and
				custom commands as JSON for simplified client use.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swJsonCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using a Groovy script -->
	<xsd:element name="groovy-command-encoder" type="swGroovyCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that hands off system and custom
				commands to a Groovy script which applies logic to encode the
				payload to a byte array.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that executes logic
							needed to encode system and custom commands.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Encodes commands using a Groovy script returning a String -->
	<xsd:element name="groovy-string-command-encoder" type="swGroovyStringCommandEncoderType"
		substitutionGroup="abstract-command-encoder">
		<xsd:annotation>
			<xsd:documentation>Command encoder that hands off system and custom
				commands to a Groovy script which applies logic to encode the
				payload to a String.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="swGroovyStringCommandEncoderType">
		<xsd:complexContent>
			<xsd:extension base="abstractCommandEncoderType">
				<xsd:attribute name="scriptPath" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Path to a Groovy script that executes logic
							needed to encode system and custom commands.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Command destination that delivers commands via MQTT -->
	<xsd:complexType name="mqttCommandDestinationType">
		<xsd:sequence>
			<xsd:element ref="abstract-command-encoder" />
			<xsd:choice minOccurs="0">
				<xsd:element name="parameter-extractor"
					type="commandDeliveryParameterExtractorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command delivery parameter
							extractor implementation that extracts MQTT delivery information
							from the device.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="hardware-id-topic-extractor" type="hardwareIdMqttParameterExtractorType">
					<xsd:annotation>
						<xsd:documentation>
							Substitutes device hardware id into expressions
							to determine the
							outbound topics to which MQTT messages will be
							sent.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attributeGroup ref="command-destination-attributes" />
		<xsd:attributeGroup ref="mqtt-broker-attributes" />
	</xsd:complexType>

	<!-- MQTT parameter extractor that substitutes device hardware id into expressions -->
	<xsd:complexType name="hardwareIdMqttParameterExtractorType">
		<xsd:attribute name="commandTopicExpr" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="systemTopicExpr" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Command destination that delivers commands via CoAP -->
	<xsd:complexType name="coapCommandDestinationType">
		<xsd:sequence>
			<xsd:element ref="abstract-command-encoder" />
			<xsd:choice minOccurs="0">
				<xsd:element name="parameter-extractor"
					type="commandDeliveryParameterExtractorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command delivery parameter
							extractor implementation that extracts CoAP delivery information
							from the device.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="metadata-coap-parameter-extractor"
					type="metadataCoapParameterExtractorType">
					<xsd:annotation>
						<xsd:documentation>
							Extracts CoAP connection information from
							device metadata.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attributeGroup ref="command-destination-attributes" />
	</xsd:complexType>

	<!-- CoAP parameter extractor that pulls connection information from device 
		metadata -->
	<xsd:complexType name="metadataCoapParameterExtractorType">
		<xsd:attribute name="hostnameMetadataField" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Metadata field that holds hostname for CoAP
					client connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="portMetadataField" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Metadata field that holds port for CoAP client
					connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="urlMetadataField" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Metadata field that holds URL for CoAP client
					connection.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Groovy script that extracts SMS parameters -->
	<xsd:complexType name="swGroovySmsParameterExtractorType">
		<xsd:attribute name="scriptPath" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Path to a Groovy script that executes logic
					needed to extract SMS parameters from the current assignment.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Command destination that delivers commands via Twilio SMS message -->
	<xsd:complexType name="twilioCommandDestinationType">
		<xsd:sequence>
			<xsd:element ref="abstract-command-encoder" />
			<xsd:choice minOccurs="0">
				<xsd:element name="parameter-extractor"
					type="commandDeliveryParameterExtractorReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom command delivery parameter
							extractor implementation that extracts CoAP delivery information
							from the device.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="groovy-sms-parameter-extractor" type="swGroovySmsParameterExtractorType">
					<xsd:annotation>
						<xsd:documentation>
							Extracts SMS parameter information using a
							Groovy script.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attributeGroup ref="command-destination-attributes" />
		<xsd:attribute name="accountSid" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="authToken" type="xsd:string"></xsd:attribute>
		<xsd:attribute name="fromPhoneNumber" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandExecutionEncoderReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandDeliveryParameterExtractorReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="commandDeliveryProviderReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Specifies asset management features -->
	<xsd:complexType name="assetManagementType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="asset-module" type="assetModuleReferenceType">
					<xsd:annotation>
						<xsd:documentation>
							References a custom asset module
							implementation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="wso2-identity-asset-module" type="wso2IdentityAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures an asset module that pulls
							information from WSO2
							Identity Server.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-device-asset-module" type="fileSystemDeviceAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem device asset module
							instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-hardware-asset-module"
					type="fileSystemHardwareAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem hardware asset module
							instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-person-asset-module" type="fileSystemPersonAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem person asset module
							instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="filesystem-location-asset-module"
					type="fileSystemLocationAssetModuleType">
					<xsd:annotation>
						<xsd:documentation>
							Configures a filesystem location asset module
							instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Reference to an asset module defined in a Spring bean -->
	<xsd:complexType name="assetModuleReferenceType">
		<xsd:attribute name="ref" type="xsd:string"></xsd:attribute>
	</xsd:complexType>

	<!-- Reference to an asset module that interacts with WSO2 Identity Server -->
	<xsd:complexType name="wso2IdentityAssetModuleType">
		<xsd:attribute name="moduleId" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Unique asset module id.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="scimUsersUrl" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					SCIM URL for accessing the list of users.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="username" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Basic authentication username for web service
					calls.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="password" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Basic authentication password for web service
					calls.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ignoreBadCertificate" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>
					Indicates whether an invalid SSL certificate on
					the server should
					be ignored.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem device asset module -->
	<xsd:complexType name="fileSystemDeviceAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem hardware asset module -->
	<xsd:complexType name="fileSystemHardwareAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem person asset module -->
	<xsd:complexType name="fileSystemPersonAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Configures an instance of a filesystem location asset module -->
	<xsd:complexType name="fileSystemLocationAssetModuleType">
		<xsd:complexContent>
			<xsd:extension base="fileSystemAssetModuleType"></xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- Common configuration for filesystem asset modules -->
	<xsd:complexType name="fileSystemAssetModuleType">
		<xsd:attribute name="moduleId" type="xsd:string" use="optional" />
		<xsd:attribute name="moduleName" type="xsd:string" use="optional" />
		<xsd:attribute name="filename" type="xsd:string" use="optional" />
	</xsd:complexType>

	<!-- Used as a placeholder for search provider elements to allow substitutionGroups -->
	<xsd:element name="abstract-search-provider" abstract="true"
		type="abstractSearchProviderType">
		<xsd:annotation>
			<xsd:documentation>
				A placeholder for search provider elements.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>

	<!-- Common search provider element information -->
	<xsd:complexType name="abstractSearchProviderType">
		<xsd:attribute name="id" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Unique id for referencing the search provider.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Name shown in user interface for search provider.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- Specifies list of search providers -->
	<xsd:complexType name="searchProvidersType">
		<xsd:sequence>
			<xsd:element ref="abstract-search-provider" minOccurs="0"
				maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- Apache Solr search provider -->
	<xsd:element name="solr-search-provider" type="solrSearchProviderType"
		substitutionGroup="abstract-search-provider">
		<xsd:annotation>
			<xsd:documentation>
				Search provider that sends search requests to
				Apache Solr and
				returns the results as matching SiteWhere events.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="solrSearchProviderType">
		<xsd:complexContent>
			<xsd:extension base="abstractSearchProviderType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
</xsd:schema>