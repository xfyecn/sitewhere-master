description = 'SiteWhere Web Components'

apply plugin: 'nebula.provided-base'

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile project(':sitewhere-activemq')
    compile project(':sitewhere-azure')
    compile project(':sitewhere-core')
    compile project(':sitewhere-hbase')
    compile project(':sitewhere-influx')
    compile project(':sitewhere-mongodb')
    compile project(':sitewhere-protobuf')
    compile project(':sitewhere-rabbit-mq')
    compile project(':sitewhere-rest')
    compile project(':sitewhere-siddhi')
    compile project(':sitewhere-solr')
    compile project(':sitewhere-spark')
    compile project(':sitewhere-spring')
    compile project(':sitewhere-twilio')
    compile project(':sitewhere-wso2')
    
	compile ('org.springframework.boot:spring-boot-starter-web')
 	compile ('org.apache.velocity:velocity')
 	
    compile group: 'org.springframework.security', name: 'spring-security-web'
    compile group: 'org.springframework.session', name: 'spring-session'
  
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    compile group: 'io.swagger', name: 'swagger-core', version:'1.5.10'
    compile group: 'io.swagger', name: 'swagger-annotations', version:'1.5.10'
    compile group: 'com.mangofactory', name: 'swagger-springmvc', version:'1.0.2'
    compile group: 'com.google.guava', name: 'guava'
    compile group: 'commons-lang', name: 'commons-lang'
    compile group: 'javax.mail', name: 'mail', version: '1.4'
    
	provided group: 'javax.servlet', name: 'javax.servlet-api'
}

task manifestJar(dependsOn:'classes',type: Jar) {
    archiveName 'restdoc-classpath.jar'
    doFirst {
        manifest {
             attributes 'Class-Path': configurations.compile.files.collect{ project.uri(it) }.join(' ')
        }
    }
}

task restDocumentationGenerator(type: JavaExec, dependsOn: manifestJar) {
    main = 'com.sitewhere.web.rest.documentation.RestDocumentationGenerator'
    classpath = sourceSets.main.output + files(manifestJar.archivePath)
    args "$projectDir/src/main/documentation", "$buildDir/rest"
}

task restDocZip(type: Zip, dependsOn: restDocumentationGenerator) {
    classifier = 'api'
    from "$buildDir/rest"
}

