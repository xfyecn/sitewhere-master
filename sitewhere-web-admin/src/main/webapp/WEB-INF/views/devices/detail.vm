<!-- #set ($sitewhere_title = "View Device") -->
<!-- #set ($sitewhere_section ="devices") -->
#parse ("includes/top.inc")

<style>
.event-pager {
	margin-top: 10px;
}
</style>

<!-- Title Bar -->
<div class="sw-title-bar content k-header" style="margin-bottom: 15px;">
	<h1 class="ellipsis" data-i18n="devices.detail.title"></h1>
	<div class="sw-title-bar-right">
		<a id="btn-edit-device" class="btn" href="javascript:void(0)"> <i
			class="fa fa-pencil sw-button-icon"></i> <span
			data-i18n="public.EditDevice">Edit Device</span></a>
	</div>
</div>

<!-- Detail panel for selected device -->
<div id="device-details" style="line-height: normal;"></div>

<!-- Tab panel -->
<div id="tabs">
	<ul>
		<li class="k-state-active">&nbsp;<font
			data-i18n="devices.detail.AssignmentHistory"></font></li>
		<!-- #if (${specification.containerPolicy} == 'Composite') -->
		<li>&nbsp;<font data-i18n="public.Composition"></font></li>
		<!-- #end -->
	</ul>
	<div>
		<div class="k-header sw-button-bar">
			<div class="sw-button-bar-title"
				data-i18n="devices.detail.DeviceAssignmentHistory"></div>
			<div>
				<a id="btn-assign-device" class="btn hide" href="javascript:void(0)">
					<i class="fa fa-tag sw-button-icon"></i> <span
					data-i18n="devices.detail.AssignDevice">Assign Device</span>
				</a> <a id="btn-filter-assignments" class="btn"
					href="javascript:void(0)"> <i
					class="fa fa-search sw-button-icon"></i> <span
					data-i18n="public.FilterResults">Filter Results</span></a> <a
					id="btn-refresh-assignments" class="btn" href="javascript:void(0)">
					<i class="fa fa-refresh sw-button-icon"></i> <span
					data-i18n="public.Refresh">Refresh</span>
				</a>
			</div>
		</div>
		<div id="assignments" class="sw-assignment-list"></div>
		<div id="assignments-pager" class="k-pager-wrap"></div>
	</div>
	<!-- #if (${specification.containerPolicy} == 'Composite') -->
	<div>
		<div id="sw-composition-section" style="margin-top: 10px;"></div>
	</div>
	<!-- #end -->
</div>

<form id="view-assignment-detail" method="get"></form>

<!--  -->
#parse ("devices/deviceUpdateDialog.inc")
<!--  -->
#parse ("devices/deviceSearchDialog.inc")
<!--  -->
#parse ("includes/assetTemplates.inc")
<!--  -->
#parse ("assignments/assignmentCreateDialog.inc")
<!--  -->
#parse ("assignments/assignmentUpdateDialog.inc")
<!--  -->
#parse ("devices/templateDeviceDetailHeader.inc")
<!--  -->
#parse ("devices/templateDeviceEntry.inc")
<!--  -->
#parse ("devices/templateDeviceEntrySmall.inc")
<!--  -->
#parse ("assignments/templateAssignmentEntry.inc")
<!--  -->
#parse ("includes/commonFunctions.inc")

<script>
	/** Set sitewhere_title */
	sitewhere_i18next.sitewhere_title = "devices.detail.title";

	var hardwareId = '$!{device.hardwareId}';

	/** Datasource for assignments */
	var assignmentsDS;

	/** Maps device element schema paths to device information */
	var mappings;

	/** Called when 'delete assignment' is clicked */
	function onDeleteAssignment(e, token) {
		var event = e || window.event;
		event.stopPropagation();
		swAssignmentDelete(token, "${basicAuth}", "${tenant.authenticationToken}", onDeleteAssignmentComplete);
	}

	/** Called after successful delete assignment */
	function onDeleteAssignmentComplete() {
		assignmentsDS.read();
	}

	/** Called when 'edit assignment' is clicked */
	function onEditAssignment(e, token) {
		var event = e || window.event;
		event.stopPropagation();
		auOpen(token, onEditAssignmentComplete);
	}

	/** Called after successful edit assignment */
	function onEditAssignmentComplete() {
		assignmentsDS.read();
	}

	/** Called when 'view assignment' is clicked */
	function onViewAssignment(e, token) {
		var event = e || window.event;
		event.stopPropagation();
		$("#view-assignment-detail").attr("action",
				"${request.contextPath}/admin/${tenant.id}/assignments/" + token + ".html");
		$('#view-assignment-detail').submit();
	}

	/** Called when 'release assignment' is clicked */
	function onReleaseAssignment(e, token) {
		var event = e || window.event;
		event.stopPropagation();
		swReleaseAssignment(token, "${basicAuth}", "${tenant.authenticationToken}", onReleaseAssignmentComplete);
	}

	/** Called after successful release assignment */
	function onReleaseAssignmentComplete() {
		loadDevice();
		assignmentsDS.read();
	}

	/** Called when 'missing assignment' is clicked */
	function onMissingAssignment(e, token) {
		var event = e || window.event;
		event.stopPropagation();
		swAssignmentMissing(token, "${basicAuth}", "${tenant.authenticationToken}", onMissingAssignmentComplete);
	}

	/** Called after successful missing assignment */
	function onMissingAssignmentComplete() {
		loadDevice();
		assignmentsDS.read();
	}

	/** Called on succesfull device assignment */
	function onAssignmentAdded() {
		loadDevice();
		assignmentsDS.read();
	}

	$(document).ready(
			function() {

				/** Create AJAX datasource for assignments list */
				assignmentsDS = new kendo.data.DataSource({
					transport : {
						read : {
							url : "${request.contextPath}/api/devices/" + hardwareId
									+ "/assignments?includeAsset=true&includeDevice=true",
							beforeSend : function(req) {
								req.setRequestHeader('Authorization', "Basic ${basicAuth}");
								req.setRequestHeader('X-SiteWhere-Tenant', "${tenant.authenticationToken}");
							},
							dataType : "json",
						}
					},
					schema : {
						data : "results",
						total : "numResults",
						parse : function(response) {
							$.each(response.results, function(index, item) {
								parseAssignmentData(item);
							});
							return response;
						}
					},
					serverPaging : true,
					serverSorting : true,
					pageSize : 15,
				});

				/** Create the assignments list */
				$("#assignments").kendoListView({
					dataSource : assignmentsDS,
					template : kendo.template($("#tpl-assignment-entry").html())
				});

				$("#assignments-pager").kendoPager({
					dataSource : assignmentsDS
				});

				$("#btn-refresh-assignments").click(function() {
					assignmentsDS.read();
				});

				$("#btn-edit-device").click(function() {
					duOpen(hardwareId, onDeviceEditSuccess);
				});

				$("#btn-assign-device").click(function() {
					acOpen(null, hardwareId, onAssignmentAdded);
				});

				/** Create the tab strip */
				tabs = $("#tabs").kendoTabStrip({
					animation : false
				}).data("kendoTabStrip");

				loadDevice();
			});

	/** Loads information for the selected device */
	function loadDevice() {
		$.getAuthJSON("${request.contextPath}/api/devices/" + hardwareId + "?includeNested=true", "${basicAuth}",
				"${tenant.authenticationToken}", loadGetSuccess, loadGetFailed);
	}

	/** Called on successful device load request */
	function loadGetSuccess(data, status, jqXHR) {
		var template = kendo.template($("#tpl-device-detail-header").html());
		parseDeviceData(data);
		data.inDetailView = true;
		$('#device-details').html(template(data));

		// Only show the 'assign device' button if not already assigned.
		if (!data.assignment) {
			$("#btn-assign-device").show();
		} else {
			$("#btn-assign-device").hide();
		}

		// Update device element mappings information.
		refreshDeviceElementMappings(data);
	}

	/** Handle error on getting device data */
	function loadGetFailed(jqXHR, textStatus, errorThrown) {
		handleError(jqXHR, "Unable to load device data.");
	}

	/** Called after device edit to update banner */
	function onDeviceEditSuccess() {
		loadDevice();
	}

	/** Add new mapping for the given path */
	function addMapping(path) {
		dvsOpen({
			"path" : path
		}, onMappingDeviceChosen);
	}

	/** Called after user chooses a device for mapping */
	function onMappingDeviceChosen(data, target) {
		var mapping = {
			"deviceElementSchemaPath" : data.path,
			"hardwareId" : target,
		}
		$.postAuthJSON("${request.contextPath}/api/devices/" + hardwareId + "/mappings", mapping, "${basicAuth}",
				"${tenant.authenticationToken}", onMappingCreateSuccess, onMappingCreateFail);
	}

	/** Called on successful call to create mapping */
	function onMappingCreateSuccess() {
		loadDevice();
	}

	/** Handle failed call to create mapping */
	function onMappingCreateFail(jqXHR, textStatus, errorThrown) {
		handleError(jqXHR, "Unable to create mapping.");
	}

	/** Delete an existing device element mapping */
	function deleteMapping(path) {
		swConfirm("Delete Device Element Mapping", "Are you sure that you want to delete the device element mapping?",
				function(result) {
					if (result) {
						$.deleteAuthJSON("${request.contextPath}/api/devices/" + hardwareId + "/mappings?path=" + path,
								"${basicAuth}", "${tenant.authenticationToken}", onMappingDeleteSuccess,
								onMappingDeleteFail);
					}
				});
	}

	/** Called on successful call to delete mapping */
	function onMappingDeleteSuccess() {
		loadDevice();
	}

	/** Handle failed call to delete mapping */
	function onMappingDeleteFail(jqXHR, textStatus, errorThrown) {
		handleError(jqXHR, "Unable to delete mapping.");
	}

	/** Load HTML for device element mappings */
	function refreshDeviceElementMappings(device) {
		mappings = swGetDeviceSlotPathMap(device);
		var schema = device.specification.deviceElementSchema;
		if (!schema) {
			return;
		}
		var shtml = getUnitHtml(schema, "");
		$('#sw-composition-section').html(shtml);
	}

	/** Create HTML for a device unit */
	function getUnitHtml(unit, context) {
		var uhtml = "";
		var slength = unit.deviceSlots.length;
		if (slength > 0) {
			uhtml += "<div class='sw-device-slot-container'>";
			uhtml += "<div class='sw-device-slot-header'><i class='fa fa-link sw-button-icon'></i> Device Slots</div>";
			for (var i = 0; i < slength; i++) {
				uhtml += getSlotHtml(unit.deviceSlots[i], context);
			}
			uhtml += "</div>";
		}
		var ulength = unit.deviceUnits.length;
		for (var i = 0; i < ulength; i++) {
			var relContext = context + "/" + unit.deviceUnits[i].path;
			uhtml += "<div class='sw-device-unit-container sw-list-entry'>";
			uhtml += getUnitHeaderHtml(unit.deviceUnits[i], relContext);
			uhtml += getUnitHtml(unit.deviceUnits[i], relContext);
			uhtml += "</div>";
		}
		return uhtml;
	}

	/** Create HTML for device unit header bar */
	function getUnitHeaderHtml(unit, relContext) {
		var uhtml = "<div class='sw-device-unit-header'><i class='fa fa-folder-close sw-button-icon'></i>" + unit.name
				+ " (<span class='sw-device-unit-path'>" + relContext + "</span>)</div>";
		return uhtml;
	}

	/** Create HTML for a device slot */
	function getSlotHtml(slot, context) {
		var relContext = context + "/" + slot.path;
		var mapping = mappings[relContext];
		var shtml;
		if (mapping) {
			shtml = "<div class='sw-device-slot' style='border: 2px solid #006; background-color: #ddf;'>"
					+ "<i class='fa fa-link sw-button-icon' style='padding-right: 5px'></i>" + slot.name
					+ " (<span class='sw-device-slot-path'>" + relContext + "</span>)";
			shtml += "<div class='sw-device-slot-buttons'>"
					+ "<i class='fa fa-link sw-button-icon' style='color: #030; margin-right: 1px;'></i>"
					+ "<a class='sw-device-slot-mapped-device' href='${request.contextPath}/admin/devices/detail.html?hardwareId="
					+ mapping.hardwareId
					+ "'>"
					+ mapping.specification.assetName
					+ "</a>"
					+ "<i class='fa fa-remove sw-button-icon sw-action-glyph sw-delete-glyph' style='margin-top: -2px;' "
					+ "onclick=\"deleteMapping('" + relContext + "');\" title='Delete Device Element Mapping'></i>"
					+ "</div></div>";
		} else {
			shtml = "<div class='sw-device-slot'><i class='fa fa-link sw-button-icon' style='padding-right: 5px'></i>"
					+ slot.name + " (<span class='sw-device-slot-path'>" + relContext + "</span>)";
			shtml += "<div class='sw-device-slot-buttons'>"
					+ "<i class='fa fa-plus sw-button-icon sw-action-glyph sw-view-glyph' " + "onclick=\"addMapping('"
					+ relContext + "');\" title='Add Device Element Mapping'></i>" + "</div></div>";
		}
		return shtml;
	}
</script>

#parse ("includes/bottom.inc")
