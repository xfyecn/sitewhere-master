option optimize_for = LITE_RUNTIME;

option java_package = "com.sitewhere.hbase.encoder";

message MetadataEntry {
	required string name = 1;
	required string value = 2;
}

message EntityData {
	required int64 createdDate = 1;
	required string createdBy = 2;
	optional int64 updatedDate = 3;
	optional string updatedBy = 4;
	optional bool deleted = 5;
	repeated MetadataEntry metadata = 6;
}

message Site {
	required string token = 1;
	required string name = 2;
	required string description = 3;
	required string imageUrl = 4;
	required string mapType = 5;
	repeated MetadataEntry mapMetadata = 6;
	required EntityData entityData = 7;
}

message Location {
	required double latitude = 1;
	required double longitude = 2;
	optional double elevation = 3;
}

message Zone {
	required string token = 1;
	required string siteToken = 2;
	required string name = 3;
	repeated Location coordinates = 4;
	required string borderColor = 5;
	required string fillColor = 6;
	required double opacity = 7;
	required EntityData entityData = 8;
}

message DeviceSlot {
	required string name = 1;
	required string path = 2;
}

message DeviceUnit {
	required string name = 1;
	required string path = 2;
	repeated DeviceSlot slots = 3;
	repeated DeviceUnit units = 4;
}

message DeviceElementSchema {
	repeated DeviceSlot slots = 1;
	repeated DeviceUnit units = 2;
}

message DeviceSpecification {
	required string token = 1;
	required string name = 2;
	required string assetModuleId = 3;
	required string assetId = 4;
	required string containerPolicy = 5;
	optional DeviceElementSchema deviceElementSchema = 6;
	required EntityData entityData = 7;
}

message CommandParameter {
	required string name = 1;
	required string type = 2;
	required bool required = 3;
}

message DeviceCommand {
	required string token = 1;
	required string specificationToken = 2;
	required string namespace = 3;
	required string name = 4;
	required string description = 5;
	repeated CommandParameter parameters = 6;
	required EntityData entityData = 7;
}

message DeviceElementMapping {
	required string deviceElementSchemaPath = 1;
	required string hardwareId = 2;
}

message Device {
	required string hardwareId = 1;
	required string siteToken = 2;
	required string specificationToken = 3;
	optional string parentHardwareId = 4;
	repeated DeviceElementMapping deviceElementMappings = 5;
	optional string comments = 6;
	optional string assignmentToken = 7;
	required EntityData entityData = 8;
}

enum DeviceEventType {
	DEMeasurements = 1; 
	DEMeasurement = 2; 
	DELocation = 3; 
	DEAlert = 4; 
	DECommandInvocation = 5; 
	DECommandResponse = 6; 
	DEStateChange = 7; 
	DEStreamData = 8;
} 

enum DeviceAssignmentType {
	DAUnassociated = 1; 
	DAAssociated = 2; 
}

message DeviceEventData {
	required string id = 1;
	required DeviceEventType eventType = 2;
	required string siteToken = 3;
	required string deviceAssignmentToken = 4;
	required DeviceAssignmentType assignmentType = 5;
	required string assetModuleId = 6;
	required string assetId = 7;
	required int64 eventDate = 8;
	required int64 receivedDate = 9;
	repeated MetadataEntry metadata = 10;
}

message DeviceLocation {
	required double latitude = 1;
	required double longitude = 2;
	required double elevation = 3;
	required DeviceEventData eventData = 4;
}

message DeviceMeasurement {
	required string name = 1;
	required double value = 2;
	optional DeviceEventData eventData = 3;
}

message DeviceMeasurements {
	repeated DeviceMeasurement measurements = 1;
	required DeviceEventData eventData = 2;
}

message DeviceAlert {
	required string source = 1;
	required string level = 2;
	required string type = 3;
	required string message = 4;
	required DeviceEventData eventData = 5;
}

message DeviceStreamData {
	required string streamId = 1;
	required int64 sequenceNumber = 2;
	required bytes data = 3;
	required DeviceEventData eventData = 4;
}

message DeviceCommandInvocation {
	required string initiator = 1;
	optional string initiatorId = 2;
	required string target = 3;
	optional string targetId = 4;
	required string commandToken = 5;
	repeated MetadataEntry parameterValues = 6;
	required string status = 7;
	required DeviceEventData eventData = 8;
}

message DeviceCommandResponse {
	required string originatingEventId = 1;
	optional string responseEventId = 2;
	optional string response = 3;
	required DeviceEventData eventData = 4;
}

message DeviceAssignmentState {
	optional int64 lastInteractionDate = 1;
	optional DeviceLocation lastLocation = 2;
	repeated DeviceMeasurement latestMeasurements = 3;
	repeated DeviceAlert latestAlerts = 4;
}

message DeviceAssignment {
	required string token = 1;
	required string deviceHardwareId = 2;
	required string siteToken = 3;
	required DeviceAssignmentType assignmentType = 4;
	optional string assetModuleId = 5;
	optional string assetId = 6;
	required string status = 7;
	optional int64 activeDate = 8;
	optional int64 releasedDate = 9;
	required EntityData entityData = 10;
}

message DeviceStream {
	required string assignmentToken = 1;
	required string streamId = 2;
	required string contentType = 3;
	required EntityData entityData = 4;
}

message DeviceGroup {
	required string token = 1;
	required string name = 2;
	required string description = 3;
	repeated string roles = 4;
	required EntityData entityData = 5;
}

enum GroupElementType {
	GEDevice = 1; 
	GEGroup = 2; 
}

message DeviceGroupElement {
	required string groupToken = 1;
	required int64 index = 2;
	required GroupElementType type = 3;
	required string elementId = 4;
	repeated string roles = 5;
}

enum OperationType {
	OTInvokeCommand = 1;
	OTUpdateFirmware = 2;
}

enum BatchOperationStatus {
	BOSUnprocessed = 1;
	BOSProcessing = 2;
	BOSFinishedSuccessfully = 3;
	BOSFinishedWithErrors = 4;
}

message BatchOperation {
	required string token = 1;
	required OperationType operationType = 2;
	repeated MetadataEntry parameters = 3;
	required BatchOperationStatus processingStatus = 4;
	optional int64 processingStartedDate = 5;
	optional int64 processingEndedDate = 6;
	required EntityData entityData = 7;
}

enum ElementProcessingStatus {
	EPSUnprocessed = 1;
	EPSProcessing = 2;
	EPSFailed = 3;
	EPSSucceeded = 4;
}

message BatchElement {
	required string batchOperationToken = 1;
	required string hardwareId = 2;
	required int64 index = 3;
	required ElementProcessingStatus processingStatus = 4;
	optional int64 processedDate = 5;
	repeated MetadataEntry metadata = 6;
}